% WARNING: This is an auto-generated file. Do not modify manually.
\makeatletter
  \newcommand{\camelhyph}[1]{\@fterfirst\c@amelhyph#1\relax }
  \def\@fterfirst #1#2{#2#1}
  \def\c@amelhyph #1{%
   \ifthenelse{\equal{#1}\relax}{}{%  Do nothing if the end has been reached
     \ifnum`#1<91 \-#1\else#1\fi%     Check whether #1 is an uppercase letter,
                                %     if so, print \-#1, otherwise #1
    \expandafter\c@amelhyph%    %     insert \c@amelhyph again.
}}
\makeatother

\newcommand{\camelcase}[1]{\camelhyph{#1}\xspace}

\subsection{Services}
\label{sec:services}

[%=EPackage.all.first.getAnnotationValue("doc", "dServices")%]

[%for (c in EClass.all.select(c|not c.eOperations.isEmpty())) { %]
\subsubsection{[%=c.name%]}
\label{sec:[%=c.name%]}
[%=c.getDoc()%]

[%for (op in c.eOperations) { %]
\begin{longtable} {|p{2cm}|p{3.5cm}|p{2.5cm}|p{6.5cm}|}
	\caption{Operation [%=c.name%].[%=op.name%]}
	\label{tab:[%=c.name.ftlc()%]-[%=op.name%]}\\
	\hline%
	Auth: [%=op.getAuth()%] & \textbf{Name} & \textbf{Type} & \textbf{Documentation} \\\hline 
	\textbf{Operation} & \camelcase{[%=op.name%]} & [%=op.getType()%] [%=op.getStream()%] & [%=op.getDoc()%] \\\hline
	\textbf{Parameter}s & & & \\\hline
	[%for (p in op.eParameters) { %]
	 & [%=p.name.escapeLaTeX()%] [%=p.getOptional()%]& [%=p.getType()%] & [%=p.getDoc()%] \\\hline 
	[%}
	if (op.eExceptions.size > 0) { %]
	\textbf{Exception}s & & & \\\hline
	[% for (e in op.eExceptions) { %]
	 & \camelcase{[%=e.name.escapeLaTeX()%]} & \multicolumn{2}{p{8.5cm}|}{[%=e.getDoc()%]} \\\hline 
	[% }
	} %]
\end{longtable}
[%}%]

[%}%]

\subsection{Entities}
\label{sec:entities}
[%for (c in EClass.all.select(c|c.eOperations.isEmpty() and not c.isExcluded() and not c.isException()).sortBy(c|c.name)) { %]
\subsubsection{[%=c.name%]}

[% describeEntity(c); %]

[%} /* for (c in EClass... */ %]

[% if (EEnum.all.size() > 0) { %]

\subsection{Enumerations}
\label{sec:enumerations}
[% for (c in EEnum.all.select(c|not c.isExcluded()).sortBy(c|c.name)) { %]
\subsubsection{[%=c.name%]}

\begin{longtable} {|p{4cm}|p{10.5cm}|}
	\caption{Enumeration [%=c.name%]}
	\label{tab:[%=c.name.ftlc()%]}\\
	\hline%
	\textbf{Name} & \textbf{Documentation} \\\hline 
	[% for (l in c.eLiterals.sortBy(l|l.name)) { %]
		[%=l.name.escapeLaTeX()%] & [%=l.getDoc()%] \\\hline 
	[% } %]
	[%=c.getUsedIn()%]
\end{longtable}

[% } /* for (c in EClass... */
} /* if (EEnum... */

var exceptions = EClass.all.select(c|c.eOperations.isEmpty() and not c.isExcluded() and c.isException()).sortBy(c|c.name);
if (exceptions.size() > 0) {
%]
\subsection{Exceptions}
\label{sec:exceptions}
[% for (c in exceptions) { %]
\subsubsection{[%=c.name%]}
[% describeEntity(c); %]
[% } /* for */
} /* if (exceptions ... */

operation EModelElement getOptional() : String {
	if (self.getAnnotationValue("doc", "optional") == "true") {
		return " (optional)";
	}
	return "";
}

operation EOperation getAuth() : String {
	if (self.getAnnotationValue("doc", "auth") == "false") {
		return "No";
	}
	return "Yes";
}

operation EOperation getStream() : String {
	if (self.isStream()) {
		return " (stream)";
	}
	return "";
}

operation EModelElement getDoc() : String {
	var doc = self.getAnnotationValue("doc", "d").trim();
	if (doc.isDefined() and not doc.endsWith(".")) {
		doc = doc + ".";
	}
	return doc;
}

operation ETypedElement getType() : String {
	if (self.eType.isDefined()) {
		var type = self.eType.name;
		if (type == "EString") type = "String";
		else if (type == "EInt") type = "int";
		else if (type == "EBoolean") type = "boolean";
		else if (type == "ELong") type = "long";
		else if (type == "EJavaObject") type = "Object";
		if (self.isMany()) {
			type = type + "[]";
		}
		return "\\camelcase{" + type + "}";
	}
	else return "void";
}

operation EClassifier getEntityType() {
  if (self.isException()) {
    return "Exception";
  } else {
    return "Entity";
  }
}

operation EClassifier usedIn() {
	return EOperation.all.select(op|op.eType = self or op.eParameters.exists(p|p.eType == self) or op.eExceptions.contains(self)).
			collect(op|op.eContainer.name + "." + op.name).
			includingAll(EClass.all.select(c|c.eStructuralFeatures.exists(sf|sf.eType = self)).collect(c|c.name));
}

operation EModelElement isExcluded() {
	return self.getAnnotationValue("doc", "exclude") == "true";
}

operation EClassifier isException() {
    return EOperation.all.exists(op|op.eExceptions.contains(self)) or self.getAnnotationValue("doc", "exception") == "true";
}

operation EOperation isStream() {
	return self.getAnnotationValue("doc", "stream") == "true";
}

operation EModelElement getAnnotationValue(name : String, detail : String) : Any {
	
	var ann := self.eAnnotations.selectOne(a|a.source = name);
	var det;
	
	if (ann.isDefined()) {
		det := ann.details.selectOne(d|d.key = detail);
	}
	
	if (det.isDefined()) {
		return det.value;
	}
	else {
		return "";
	}
	return det;	
}

operation String escapeLaTeX() {
  return self.replaceAll("_", "\\\\_");
}

operation EClassifier getUsedIn() : String {
  var usedIn = self.usedIn();
  if (usedIn.size() > 0) {
    var columns = 3;
    if (self.isKindOf(EEnum)) {
      columns = 2;
    }
	%]\multicolumn{[%=columns%]}{|p{.95\linewidth}|}{\textbf{Used in:} [%=usedIn.concat(", ")%]} \\\hline[%
  }
}

$pre self.eAllStructuralFeatures.contains(sf)
operation EClassifier getInherited(sf: EStructuralFeature) : String {
  if (self.eStructuralFeatures.contains(sf)) {
    return "";
  } else {
    return " (\\nohyphens{inherited})";
  }
}

/*
 * Generates LaTeX code for an entity or an exception.
 */
operation describeEntity(c: EClass) {
  out.println(c.getDoc());
  out.println();

  if (c.eAllSuperTypes.size() > 0) {
    out.print("\\emph{Inherits from}: " + c.eAllSuperTypes.collect(t|t.name).concat(", ") + ".\n\n");
  }

  var subtypes = EClass.all.select(k|k.eSuperTypes.contains(c));
  if (subtypes.size() > 0) {
    out.print("\\emph{Inherited by}: " + subtypes.collect(t|t.name).concat(", ") + ".\n\n");
  }
%]
\begin{longtable} {|p{4cm}|p{4cm}|p{7.25cm}|}
	\caption{[%=c.getEntityType() + ' ' + c.name%]}
	\label{tab:[%=c.name.ftlc()%]}\\
	\hline%
	\textbf{Field} & \textbf{Type} & \textbf{Documentation} \\\hline
	[%
	  if (c.eAllStructuralFeatures.size() > 0) {
	    for (sf in c.eAllStructuralFeatures.sortBy(f|f.name)) { %]
		  [%=sf.name.escapeLaTeX() + c.getInherited(sf) %] & [%=sf.getType() + sf.getOptional()%] & [%=sf.getDoc()%] \\\hline
	 [% }
	  } else { %]
	    --- & --- & --- \\\hline
   [% } %]
   [%=c.getUsedIn()%]
\end{longtable}
[%  
}
%]