[%

operation EModelElement getOptional() : String {
	if (self.getAnnotationValue("doc", "optional") == "true") {
		return "optional";
	}
	return "required";
}

operation EOperation getAuth() : String {
	if (self.getAnnotationValue("doc", "auth") == "false") {
		return "No";
	}
	return "Yes";
}

operation EOperation getStream() : String {
	if (self.isStream()) {
		return " (stream)";
	}
	return "";
}

operation EModelElement getDoc() : String {
	var doc = self.getAnnotationValue("doc", "d").trim();
	if (doc.isDefined() and not doc.endsWith(".")) {
		doc = doc + ".";
	}
	return doc;
}

operation EModelElement getNum() : Integer {
	var num = self.getAnnotationValue("thrift", "n");
	if (num.isDefined and num.isInteger()) {
		return num.asInteger();
	}
	else {
		return 0;
	}
}

operation ETypedElement getType() : String {
	if (self.eType.isDefined()) {
		var eType = self.eType;
		var type = eType.name;
		if (eType.isMap()) {
			return "map<" + eType.getMapKeyField().getType() + "," + eType.getMapValueField().getType() + ">";
		}
		switch (type) {
			case "EByte"      : type = "byte";
			case "EByteArray" : type = "binary";
			case "EBoolean"   : type = "bool";
			// Java characters are UTF-16 internally, cannot be represented all the time by a single byte
			case "EChar"   : type = "string";
			// TODO: we should warn users that floats need to be turned into doubles (floats are not supported by Thrift)
			case "EDouble"  : type = "double";
			case "EFloat"  : type = "double";
			case "EInt"    : type = "i32";
			case "ELong"   : type = "i64";
			case "EJavaObject" : type = "string"; // TODO: throw error from EVL!
			case "EShort"  : type = "i16";
			case "EString" : type = "string";
		}
		if (self.isMany()) {
			type = "list<" + type + ">";
		}
		return type;
	}
	else return "void";
}

operation EClassifier getEntityType() {
  if (self.isException()) {
    return "Exception";
  } else if (self.isUnion()) {
    return "Union";
  } else {
    return "Entity";
  }
}

operation EClassifier getEntityThriftKeyword() {
  if (self.isException()) {
    return "exception";
  } else if (self.isUnion()) {
    return "union";
  } else {
    return "struct";
  }
}

operation EClassifier usedIn() {
	return EOperation.all.select(op|op.eType = self or op.eParameters.exists(p|p.eType == self) or op.eExceptions.contains(self)).
			collect(op|op.eContainer.name + "." + op.name).
			includingAll(EClass.all.select(c|c.eStructuralFeatures.exists(sf|sf.eType = self)).collect(c|c.name));
}

operation EModelElement isExcluded() {
	return self.getAnnotationValue("doc", "exclude") == "true";
}

operation EClassifier isException() {
    return EOperation.all.exists(op|op.eExceptions.contains(self)) or self.getAnnotationValue("doc", "exception") == "true";
}

operation EClassifier isUnion() {
    return self.getAnnotationValue("thrift", "union") == "true";
}

operation EOperation isStream() {
	return self.getAnnotationValue("doc", "stream") == "true";
}

operation EClassifier isMap() {
	return self.getAnnotationValue("thrift.map", "key") <> "";
}

operation EClassifier getMapKeyField() : EStructuralFeature {
	var fldName = self.getAnnotationValue("thrift.map", "key");
	return self.eAllStructuralFeatures.selectOne(f|f.name = fldName);
}

operation EClassifier getMapValueField() : EStructuralFeature {
	var fldName = self.getAnnotationValue("thrift.map", "value");
	return self.eAllStructuralFeatures.selectOne(f|f.name = fldName);
}

operation EModelElement getAnnotationValue(name : String, detail : String) : Any {
	var ann := self.eAnnotations.selectOne(a|a.source = name);
	var det;
	
	if (ann.isDefined()) {
		det := ann.details.selectOne(d|d.key = detail);
	}
	
	if (det.isDefined()) {
		return det.value;
	}
	else {
		return "";
	}
	return det;
}

operation EPackage getJavaNamespace() : String {
  var ann = self.getAnnotationValue("thrift", "javans");
  if (ann.isDefined()) {
    return ann;
  } else {
    return self.nsURI;
  }
}

@cached
operation EClass computeDepth() : Integer {
	if (self.~depthVisiting.isDefined()) {
	  -- Avoid cyclic references
	  return -1;
	}

	var curDeepestChild = -1;
	self.~depthVisiting = true;
	for (sf in self.eAllStructuralFeatures.collect(c | c.getEType).collect(c : EClass | c)) {
		var childDepth = sf.computeDepth();
		if (childDepth > curDeepestChild) {
			curDeepestChild = childDepth;
		} 
	}
	delete self.~depthVisiting;
	
	return curDeepestChild + 1;
}

/*
 * Generates LaTeX code for an entity or an exception.
 */
operation describeEntity(c: EClass) {
	var iParameter = 1;
	for (sf in c.eAllStructuralFeatures) {
		if (sf.getNum() > iParameter) {
			iParameter = sf.getNum();
		}
   %]
	 /* [%=sf.getDoc()%] */ [%=iParameter%]: [%=sf.getOptional() %] [%=sf.getType()%] [%=sf.name%],
[% iParameter = iParameter + 1;
   }
}
%]