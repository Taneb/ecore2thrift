import 'utilities.eol';


context ENamedElement {
	constraint NotReservedWord {
		check {
			return not self.name.isThriftReservedWord();
		}
		message : self.name + " is a reserved word! Please call it something different!"
	}
}

context EAnnotation {
	// Number Annotation
	guard : self.source = "thrift" and self.details.containsKey("n")
	constraint IsEnumerable {
		check {
			return Set{"EAttribute", "EParameter"}.includes(self.getEModelElement().eClass().name);
		}
		message : self.getEModelElement().name + " must not have a thrift(n=...) annotation!"
	}
}

context EAnnotation {
	// Java Namespace Annotation
	guard : self.source = "thrift" and self.details.containsKey("javans")
	constraint IsPackage {
		check {
			return self.getEModelElement().eClass().name = "EPackage";
		}
		message : self.getEModelElement().name + " is not a package and should not have a thrift(javans=...) annotation!"
	}
	constraint IsValidPackageName {
		check {
			return self.details.get("javans").isJavaPackageName();
		}
		message : self.details.get("javans") + " is not a valid Java Package name!"
	}
}

context EClass {
	constraint OperationsOrFields {
		check {
			return self.eOperations.isEmpty() or self.eAttributes.isEmpty();
		}
		message : "You must have either no operations or no fields in " + self.name
	}
	/*
	constraint NoReferences {
		check {
			// lists are kind of references too
			return self.eReferences.forAll(ref | ref.isMany());
		}
		message : "There must not be any references in " + self.name
	}
	*/
}

context EClass {
	// No operations, ie., is a struct or exception
	guard : self.eOperations.isEmpty()

	constraint ValidEnumeration {
		check {
			// the number annotation is valid when it exists
			// TODO: check that they are unique! (including the ones without explicit numbers)
			return self.eStructuralFeatures.forAll(annotation | annotation.hasNumberAnnotation() implies annotation.isNumberAnnotationValid());
		}
		message : "@thrift(n=...) annotations must have an integer value!"
	}
	
	constraint FieldNumbering {
		check {
			return self.eAttributes.numberAnnotationsUnique();
		}
	}
	
	constraint EitherExceptionOrStruct {
		check {
			return not (self.isUsedAsException() and self.isUsedAsStruct());
		}
		message : self.name + " is used as both an exception and a struct!"
	}
	
	critique UsedAsExceptionOrStruct {
		check {
			return self.isUsedAsException() or self.isUsedAsStruct();
		}
		message : self.name + " is not used!"
	} 
}

context EClass {
	// is a service
	guard : self.eAttributes.isEmpty() and not self.eOperations.isEmpty()
	
	constraint NoNumber {
		check {
			return not self.hasNumberAnnotation();
		}
		message : self.name + " must not have a @thrift(n=...) annotation!"
	}
}

context EOperation {
	constraint NoNumbering {
		check {
			return not self.hasNumberAnnotation();
		}
		message : "An operation should not have a @thrift(n=...) annotation!\n" + "In " + self.name
	}
	
	constraint ParameterNumbering {
		check {
			return self.eParameters.numberAnnotationsUnique();
		}
		message : "All parameters should have unique numbers in " + self.name
	}
	
	constraint ExceptionNumbering {
		check {
			return self.eExceptions.numberAnnotationsUnique();
		}
		message : "All exceptions should have unique numbers in " + self.name
	}
}