operation String isThriftReservedWord() : Boolean {
	var thriftReservedWords = 
		Set{"namespace", "cpp_namespace", "cpp_include",  "cpp_type",
		"java_package", "cocoa_prefix", "php_namespace", "py_module", 
		"perl_package", "ruby_namespace", "smalltalk_category", 
		"smalltalk_prefix", "xsd_all", "xsd_optional", "xsd_nillable",
		"xsd_namespace", "xsd_attrs", "include", "void", "bool", "byte", "i16",
		"i32", "i64", "double", "string", "binary", "slist", "senum", "map",
		"list", "set", "async", "typedef", "struct", "exception", "extends", 
		"throws", "service", "enum", "const", "required", "optional", "abstract",
		"and", "args", "as", "assert", "break", "case", "class", "continue",
		"declare", "def", "default", "del", "delete", "do", "elif", "else", 
		"elseif", "except", "exec", "false", "final", "finally", "float", "for",
		"foreach", "function", "global", "goto", "if", "implements", "import",
		"in", "inline", "instanceof", "interface", "is", "lambda", "native", "new",
		"not", "or", "pass", "public", "print", "private", "protected", "raise",
		"return", "sizeof", "static", "switch", "synchronized", "this", "throw",
		"transient", "true", "try", "unsigned", "var", "virtual", "volatile",
		"while", "with", "union", "yield"};

	return thriftReservedWords.includes(self);
}

operation EClassifier getMapKeyField() : EStructuralFeature {
	var fldName = self.getAnnotationValue("thrift.map", "key");
	return self.eAllStructuralFeatures.selectOne(f|f.name = fldName);
}

operation EClassifier getMapValueField() : EStructuralFeature {
	var fldName = self.getAnnotationValue("thrift.map", "value");
	return self.eAllStructuralFeatures.selectOne(f|f.name = fldName);
}

operation EModelElement getAnnotationValue(name : String, detail : String) : Any {
	var ann := self.eAnnotations.selectOne(a|a.source = name);
	var det;
	
	if (ann.isDefined()) {
		det := ann.details.selectOne(d|d.key = detail);
	}
	
	if (det.isDefined()) {
		return det.value;
	}
	else {
		return "";
	}
	return det;
}

operation EClassifier isMap() {
	return self.getAnnotationValue("thrift.map", "key") <> "";
}

operation ETypedElement getType() : String {
	if (self.eType.isDefined()) {
		var eType = self.eType;
		var type = eType.name;
		if (eType.isMap()) {
			return "map<" + eType.getMapKeyField().getType() + "," + eType.getMapValueField().getType() + ">";
		}
		switch (type) {
			case "EByte"      : type = "byte";
			case "EByteArray" : type = "binary";
			case "EBoolean"   : type = "bool";
			// Java characters are UTF-16 internally, cannot be represented all the time by a single byte
			case "EChar"   : type = "string";
			// TODO: we should warn users that floats need to be turned into doubles (floats are not supported by Thrift)
			case "EDouble"  : type = "double";
			case "EFloat"  : type = "double";
			case "EInt"    : type = "i32";
			case "ELong"   : type = "i64";
			case "EShort"  : type = "i16";
			case "EString" : type = "string";
			default :
				if (type.isKindOf(EDataType)) {
					 return "unknown";
					 }
		}
		if (self.isMany()) {
			type = "list<" + type + ">";
		}
		return type;
	}
	else return "void";
}

operation EClass hasOperations() : Boolean {
	return self.EOperation.all.size() <> 0;
}  

operation EClass hasFields() : Boolean {
	return self.EAttribute.all.size() <> 0;
}

operation EModelElement hasNumberAnnotation() : Boolean {
	return self.eAnnotations.select(annotation | annotation.source = "thrift").exists(thrift | thrift.details.containsKey("n"));
}

operation EStructuralFeature isNumberAnnotationValid() : Boolean {
	var annotation = self.eAnnotations.select(annotation | annotation.source = "thrift" and annotation.details.containsKey("n"));
	return annotation.size = 1 and annotation.first.details.get("n").isInteger() and annotation.first.details.get("n").asInteger() >= 0;
}

operation Collection numberAnnotationsUnique() : Boolean {
	var ns = new Set();
	for (annotatable in self) {
		if (annotatable.hasNumberAnnotation()) {
			var n = annotatable.eAnnotations.selectOne(annotation | annotation.source = "thrift" and annotation.details.containsKey("n")).details.get("n");
			if (not ns.add(n)) {
				return false;
			}
		}
	}
	return true;
}

operation EClass isUsedAsException() : Boolean {
	return EOperation.all.exists(op | op.eExceptions.includes(self));
}

operation EClass isUsedAsStruct() : Boolean {
	return ETypedElement.all.exists(op | op.eType = self);
}

operation String isJavaPackageName() : Boolean {
	for (part : String in self.split("\\.")) {
		var s = new Native("java.lang.String")(part);
		if (s.length() = 0) {
			return false;
		}
		var i = 0;
		while (i < s.length()) {
			var c = new Native("java.lang.Character")(s.charAt(i));
			if (not (i = 0 implies c.isJavaIdentifierStart(c))) {
				return false;
			}
			else if (not c.isJavaIdentifierPart(c)) {
				return false;
			}
			i = i + 1;
		}
	}
	return true;
}